"""1. 넓은 의미에서의 프로그래밍에서 객체란 무엇인가?
-> 객체란, 속성이나 행동을 갖는 모든 것이다.(속성만 가질수도 있고, 행동만 가질수도 있고 둘 다 가질수도 있다.)
-> 속성은 객체가 갖고있는 특징이라고 할 수 있고, 행동은 객체가 할 수 있는 행동이라고 할 수 있다.
-> 예컨대 나는 객체이다. 왜냐하면 나는 키가 178cm라는 특징(속성)을 갖고있다. 또 나는 뛰는 행동을 할 수 있기 때문이다.
-> 예컨대 모든 dictionary는 객체이다. 각 dictionary 마다 특징(속성)이 있기 때문이다. 
어떤 dictionary는 비어있을 수도 있고, 야구선수에 대한 정보를 담고 있을 수도 있고, 내 친구들에 대한 정보를 담고 있을 수도 있기 때문이다.

ex) a = {}, b = {"김기찬": "마무리 투수", "오성주" : "3루수"}, c = {"고우상" : "술을 잘 먹는 친구"}
dictionary a,b,c는 각각의 특징(속성)을 가지고 있기 때문에 객체이다.
이정도를 읽었으면 그러면 객체가 아닌 것이 거의 없겠는데? 생각할 수 있다. 맞다. 객체가 아닌 것이 거의 없다. 
방금까지 소개한 것이 객체의 통상적인 개념이다.

2. 그렇다면 파이썬에서 class를 이용해 만드는 객체란 무엇인가?
-> 파이썬에서 class를 이용해 만드는 객체는, 속성 or 행동을 가지고 있는 어떠한 공간이다.
(속성만 가지고 있거나 행동만 가지고 있거나 둘 다 가지고 있거나) 
-> 이때, 속성은 변수와 똑같고, 행동은 함수와 똑같다. 
-> 즉 파이썬에서 class를 이용해 만드는 객체란, 변수 or 함수를 가지고 있는 어떠한 공간이다.
(변수만 가지고 있거나 함수만 가지고 있거나 둘 다 가지고 있거나)
-> 즉 파이썬에서 class를 이용해 객체를 생성한다는 것은, 어떠한 공간을 만들고 그 공간에 변수 or 함수를 넣는다는 것을 의미한다.
(변수만 넣거나 함수만 넣거나 둘 다 넣거나)

3. 그러면 왜 class를 이용해 객체를 만드는가? 
-> 1. 같은 속성과 행동 즉, 같은 변수와 함수들을 가지는 객체들을 하나의 집단으로 분류해놓기 위해서.
-> 2. 같은 속성과 행동 즉, 같은 변수와 함수들을 가지는 객체들을 빠르게 하나씩 생성하기 위해서.

ex) 내가 삼각김밥 객체 3개를 만들어내고 싶다. 그래서 만들었다. 
a = {"사용한밥" : "석민이 어머니의 집밥", "사용한참치" = "동원참치"}
b = {"사용한밥" : "재진이 어머니의 집밥", "사용한참치" = "재진참치"}
c = {"사용한밥" : "지현이 어머니의 집밥", "사용한참치" = "지현참치"}

아 너무 귀찮다. 내가 회사에 들어가서 저런거 100개를 만든다고 생각해보자. 너무 귀찮지 아니한가? 
그래서 프로그래머들은 이 생각을 한다. 그냥 어떤 함수같은거에 (석민,동원) 이렇게만 넣으면 객체 a를 return해주면 좋겠다. 
그래서 이런 구문을 만들 수 있다. 
"""

def chamchigimbab(name1,name2):
    returndictionary = {"사용한밥" : "{}이 어머니의 집밥".format(name1), "사용한참치" : "{}참치".format(name2)}
    return returndictionary
a = chamchigimbab("지현","지현")    

"""
오 좋다. 객체가 잘 생성된 것 같다. 그런데 과학자들의 고질병이 있다. 바로 비슷한게 있으면 분류하자는 것이다.
분류하는 이유는 그 타입만의 함수를 정의하기 위해서이다. 
예를 들면 그 타입만의 연산을 정의하기 위해서 라고 할 수도 있겠다.(연산은 함수를 통해 이루어지니까) 
(int와 int는 덧셈이 가능하도록 하고, int와 str은 덧셈이 불가능하도록 하기 위해서) 
또 덧셈이 불가능한지 가능한지를 그 객체 고유의 값이 아니라 type만으로 빠르게 판별하기 위해서 이다. 

즉 {"사용한밥" : "00이 어머니의 집밥", "사용한참치" = "00참치"} 이런 종류의 객체들을 하나의 타입으로 같이 묶어버리자는 것이다. 
이것을 통해 이 객체들만의, 즉 이 타입만의 함수를 정의하자는 것이다. 이 타입만의 함수로는  
"""

def myfriend(a):
    return a["사용한밥"][0]+a["사용한밥"][1]

"""
이 정도가 있을 것이다. 이것은 {"사용한밥" : "00이 어머니의 집밥", "사용한참치" = "00참치"} 보통 이런 종류의 객체들 에게만 
오류를 이르키지 않는 함수임을 잘 알 수 있을 것이다.

이때 우리는  {"사용한밥" : "00이 어머니의 집밥", "사용한참치" = "00참치"} 이러한 객체들을 보고 바로 같은 타입이다 아니다를 구별할 수 있지만,
컴퓨터에게는 별로 쉽진 않을 것이다. for문 돌려서 계속 검사해야함.....
그래서 이때, 프로그래머들이 하고 싶은 거는 뭐냐면, 애초에 객체를 생성할 때 부터 
{"사용한밥" : "00이 어머니의 집밥", "사용한참치" = "00참치"} 이런 종류의 객체들에게 타입을 부여하자는 것이다.

이러한 배경에서 객체를 만드는 하나의 방법으로 class 구문이 등장한 것이다. 
"""

"""
다시 3번을 remind 하자.
3. 그러면 왜 class를 이용해 객체를 만드는가? 
-> 1. 같은 속성과 행동 즉, 같은 변수와 함수들을 가지는 객체들을 하나의 집단으로 분류해놓기 위해서.
-> 2. 같은 속성과 행동 즉, 같은 변수와 함수들을 가지는 객체들을 빠르게 하나씩 생성하기 위해서.
"""

"""
그리고 2번을 remind 하자.
2. 그렇다면 파이썬에서 class를 이용해 만드는 객체란 무엇인가?
-> 파이썬에서 class를 이용해 만드는 객체는, 속성 or 행동을 가지고 있는 어떠한 공간이다.
(속성만 가지고 있거나 행동만 가지고 있거나 둘 다 가지고 있거나) 
-> 이때, 속성은 변수와 똑같고, 행동은 함수와 똑같다. 
-> 즉 파이썬에서 class를 이용해 만드는 객체란, 변수 or 함수를 가지고 있는 어떠한 공간이다.
(변수만 가지고 있거나 함수만 가지고 있거나 둘 다 가지고 있거나)
-> 즉 파이썬에서 class를 이용해 객체를 생성한다는 것은, 어떠한 공간을 만들고 그 공간에 변수 or 함수를 넣는다는 것을 의미한다.
(변수만 넣거나 함수만 넣거나 둘 다 넣거나)
"""

"""
밑에 class 구문을 보자. 
이 class 구문을 통해 생성하고자 하는 객체들의 type은 <class "samgakgimbab">이다. 
그리고 이 객체(공간)들은 변수들과 함수들을 가진다.
객체(공간)들에 있는 변수들과 함수들은 각각의 객체(공간) 안에 있는 것이므로, 호출해줄 때에는 객체이름.함수나 변수 꼴로 호출한다.
ex) print(a.bab) 
"""

"""
자 그래서 <class "samgakgimbab">을 type으로 갖는 객체들을 생성하는 방법은 다음과 같다.
samgakgimbab("변수1","변수")라는 코드를 치면 된다.
그러면 samgakgimbab("변수1","변수")이 a라는 하나의 객체(공간)로 생성된다.  
"""

"""
<class "samgakgimbab">을 type으로 갖는 객체(공간)들은 다음과 같은 특징을 가진다.
1. bab = "congbab" 이라는 변수를 가진다.(각각의 객체(공간)안에 bab = "congbab"이라는 변수가 있다는 것.)
2. 생성할때 받은 "변수1", "변수2" 를 토대로, chamchi = "변수1", gimchi = "변수2" 라는 변수를 가진다.
(각각의 객체(공간)안에 chamchi = "변수1", gimchi = "변수1"이라는 변수가 있다는 것.)
3. 각각의 객체(공간)안에 whatjaereoow함수가 있다. 즉 whatjaereoow함수는  
<class "samgakgimbab">을 type으로 갖는 객체들을 대상으로만 작동한다.
"""

"""
마지막: 구문 해석
a = samgakgimbab("dongwonchamchi","yeolmoogimchi")코드가 실행되면 하나의 객체 생성을 시작한다. 
여기서 ("dongwonchamchi","yeolmoogimchi")는 class구문 안에 쓰일 함수의 2번째, 3번째 매개변수로 각각 "dongwonchamchi","yeolmoogimchi"가
들어간다는 것을 의미한다. 

객체를 생성한다는 것은 공간안에 변수 or 함수를 넣는다는 말과 같다.
따라서 
코드가 실행되면 먼저 컴퓨터 안에 공간을 하나 확보하고 그 공간의 이름을 a라고 한다. 
그리고 그 공간에 bab = "congbab"이라는 변수를 하나 넣는다.
그리고 __init__함수가 실행된다. (규칙임 항상 객체를 만들려고 하면 __init__함수가 실행됌.)
그리고 whatjaereoow함수가 정의된다.(실행x)
"""

"""
주의할 점은 class 구문 안에 함수들 안에서 객체(공간)에 변수를 넣으려면, (그 공간.변수  = 넣고자하는 변수) 이렇게 코딩해야 한다.
ex) self.chamchi = chamchi
또 주의할 점은 class 구문 안에 함수들은 첫번째 매개변수로 항상 그 공간 자체를 받는다. 
즉 밑에 class 구문에 있는 함수들은 모두 매개변수로 (만들어진 공간,"dongwonchamchi","yeolmoogimchi" )를 받는다.
"""
class samgakgimbab:
    bab = "congbab"
    def __init__(self,chamchi,gimchi):
        self.chamchi = chamchi
        self.gimchi = gimchi
    def danmoogi(self,danmoogi):
        self.danmooji = danmoogi
a = samgakgimbab("dongwonchamchi","yeolmoogimchi")
print(id(a))
print(a.bab)
print(a.chamchi)  
print(a.danmoogi("석민단무지"))      

"""
이 과정을 모두 거치면, a 라는 하나의 객체(공간)이 만들어지는 것이다. 
id는 공간(객체)이 저장된 경로를 의미한다. 대충 저장된 공간을 숫자로써 표현했다 정도로 인식하면 된다. 
"""

"""
힘들어 죽것다 끝!"""

 